// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String  @unique
  nick  String  @unique
  login String  @unique
  hash  String?

  avatarUri String  @default("default.jpg")
  isOnline  Boolean @default(false)
  isInGame  Boolean @default(false)

  friendsUser        Friend[]      @relation("FriendsUser")
  friendsUserFriends Friend[]      @relation("FriendsUserFriend")

  score       Int @default(0)
  gamesWon    Int @default(0)
  gamesLost   Int @default(0)
  gamesPlayed Int @default(0)
  rank        Int @default(0) //We'll need a function here that defaults to total-database-users

  bookmarks Bookmark[]

  @@map("users")
}

model Friend {
  id            Int     @id @default(autoincrement())
  userId        Int
  user          User    @relation(name: "FriendsUser", fields: [userId], references: [id], onDelete: Cascade)
  friend_userId Int
  friend        User    @relation(name: "FriendsUserFriend", fields: [friend_userId], references: [id], onDelete: Cascade)
  accepted      Boolean @default(false)

  @@unique([userId, friend_userId])
  @@map("friends")
}

model ChatChannel {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  ownerUserId Int
  owner       User     @relation(name: "ChatChannelOwner", fields: [ownerUserId], references: [id], onDelete: Cascade)
  name        String   @unique
  isPrivate   Boolean  @default(false)
  hash        String?

  chatChannelUser    ChatChannelUser[]    @relation("ChatChannelUserChannel")
  chatChannelMessage ChatChannelMessage[] @relation("chatChannelMessageChannel")

  @@map("chatchannels")
}

model ChatChannelUser {
  id           Int         @id @default(autoincrement())
  joinedAt     DateTime    @default(now())
  channelId    Int
  channel      ChatChannel @relation(name: "ChatChannelUserChannel", fields: [channelId], references: [id], onDelete: Cascade)
  userId       Int
  user         User        @relation(name: "ChatChannelUserUser", fields: [userId], references: [id], onDelete: Cascade)
  isAdmin      Boolean     @default(false)
  isBanned     Boolean     @default(false)
  isMutedUntil DateTime?

  @@unique([channelId, userId])
  @@map("chatchannelusers")
}

model ChatChannelMessage {
  id        Int         @id @default(autoincrement())
  sentAt    DateTime    @default(now())
  channelId Int
  channel   ChatChannel @relation(name: "chatChannelMessageChannel", fields: [channelId], references: [id], onDelete: Cascade)
  userId    Int
  user      User        @relation(name: "ChatChannelMessageUser", fields: [userId], references: [id], onDelete: Cascade)
  message   String

  @@map("chatchannelmessages")
}

model ChatBlockedUser {
  id          Int  @id @default(autoincrement())
  userId      Int
  user        User @relation(name: "ChatBlockedUser", fields: [userId], references: [id], onDelete: Cascade)
  otherUserId Int
  otherUser   User @relation(name: "ChatBlockedOtherUser", fields: [otherUserId], references: [id], onDelete: Cascade)

  @@unique([userId, otherUserId])
  @@map("chatblockedusers")
}

model ChatDirect {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId1   Int
  user1     User     @relation(name: "ChatDirectUser1", fields: [userId1], references: [id], onDelete: Cascade)
  userId2   Int
  user2     User     @relation(name: "ChatDirectUser2", fields: [userId2], references: [id], onDelete: Cascade)

  chatDirectMessageDirect ChatDirectMessage[] @relation("ChatDirectMessageDirect")

  @@unique([userId1, userId2])
  @@map("chatdirects")
}

model ChatDirectMessage {
  id       Int        @id @default(autoincrement())
  sentAt   DateTime   @default(now())
  directId Int
  direct   ChatDirect @relation(name: "ChatDirectMessageDirect", fields: [directId], references: [id], onDelete: Cascade)
  userId   Int
  user     User       @relation(name: "ChatDirectMessageUser", fields: [userId], references: [id], onDelete: Cascade)
  message  String

  @@map("chatdirectmessages")
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  link  String

  description String?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bookmarks")
}
